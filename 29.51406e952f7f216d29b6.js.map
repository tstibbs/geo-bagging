{"version":3,"sources":["webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/trigs/config_base.js","webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/trigs/config_embedding.js","webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/trigs/points_builder.js","webpack://@tstibbs/geo-bagging-ui/./src/js/custom_default_icon.js"],"names":["dimensionNames","dimensionValueLabels","typeValueLabels","build","config","aspectLabel","icons","Pillar","iconUrl","iconAnchor","popupAnchor","parser","attribution","forEach","value","searchResult","initialize","manager","bundleConfig","bundleName","urlPrefix","this","generalPoints","_config","pointsToLoad","i","length","point","lngLat","eastings","northings","addWithoutDimensions","url","name","significantPoint","fetchData","resolve","promise","fetchMeta","parse","lng","lat","id","physicalType","condition","waypointRegex","test","exec","extraTexts","addMarker","add","icon","customIconPath","options","baseUrl","_customIconPath","iconRetinaUrl","_getIconUrl"],"mappings":"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","file":"29.51406e952f7f216d29b6.js","sourcesContent":["import leaflet from 'VendorWrappers/leaflet.js'\nimport pointsBuilder from './points_builder.js'\nimport CustomDefaultIcon from '../../custom_default_icon.js'\nimport pillarIcon from '../../../img/pillar.png'\n\nvar dimensionNames = ['Type', 'Condition']\nvar dimensionValueKeys = [\n\t'Pillar',\n\t'Bolt',\n\t'Surface Block',\n\t'Rivet',\n\t'Buried Block',\n\t'Cut',\n\t'Other',\n\t'Berntsen',\n\t'FBM',\n\t'Intersected Station',\n\t'Disc',\n\t'Brass Plate',\n\t'Active station',\n\t'Block',\n\t'Concrete Ring',\n\t'Curry Stool',\n\t'Fenomark',\n\t'Platform Bolt',\n\t'Cannon',\n\t'Spider',\n\t'Pipe'\n]\nvar dimensionValueLabels = {}\nvar typeValueLabels = {}\ndimensionValueLabels[dimensionNames[0]] = typeValueLabels\n\ndimensionValueKeys.forEach(function (value) {\n\ttypeValueLabels[value] = '<a href=\"http://trigpointing.uk/wiki/' + value + '\">' + value + '</a>'\n})\n\nexport default function build(config) {\n\treturn {\n\t\taspectLabel: 'Trig Points',\n\t\ticons: {\n\t\t\tPillar: new CustomDefaultIcon(config, pillarIcon, {\n\t\t\t\ticonUrl: pillarIcon,\n\t\t\t\ticonAnchor: [10, 40], // point of the icon which will correspond to marker's location\n\t\t\t\tpopupAnchor: [1, -38] // point from which the popup should open relative to the iconAnchor\n\t\t\t})\n\t\t},\n\t\tdimensionNames: dimensionNames,\n\t\tdimensionValueLabels: dimensionValueLabels,\n\t\tparser: pointsBuilder,\n\t\tattribution:\n\t\t\t'&copy; <a href=\"http://trigpointing.uk\">trigpointing.uk</a> and licenced by Ordnance Survey under the <a href=\"http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\">Open Government Licence</a>.'\n\t}\n}\n","import $ from 'jquery'\nimport conversion from '../../conversion.js'\nimport CustomDefaultIcon from '../../custom_default_icon.js'\nimport trigpointingBase from './config_base.js'\nimport TrigsPointsBuilder from './points_builder.js'\nimport redIcon from '../../../img/hill.png'\n\nexport default function build(config) {\n\treturn $.extend(true, {}, trigpointingBase(config), {\n\t\ticons: {\n\t\t\tsearchResult: new CustomDefaultIcon(config, redIcon, {\n\t\t\t\ticonUrl: redIcon\n\t\t\t})\n\t\t},\n\t\tparser: TrigsPointsBuilder.extend({\n\t\t\tinitialize: function (manager, bundleConfig, bundleName, urlPrefix) {\n\t\t\t\tTrigsPointsBuilder.prototype.initialize.call(this, manager, bundleConfig, bundleName, urlPrefix)\n\t\t\t\tvar generalPoints = this._config.pointsToLoad.generalPoints\n\t\t\t\tfor (var i = 0; i < generalPoints.length; i++) {\n\t\t\t\t\tvar point = generalPoints[i]\n\t\t\t\t\tvar lngLat = conversion.osgbToLngLat(point.eastings, point.northings)\n\t\t\t\t\tthis.addWithoutDimensions(lngLat, point.url, point.name)\n\t\t\t\t}\n\t\t\t\tvar significantPoint = this._config.pointsToLoad.significantPoint\n\t\t\t\tif (significantPoint != null) {\n\t\t\t\t\tvar lngLat = conversion.osgbToLngLat(significantPoint.eastings, significantPoint.northings)\n\t\t\t\t\tvar iconName = 'searchResult'\n\t\t\t\t\tthis.addWithoutDimensions(lngLat, significantPoint.url, significantPoint.name, iconName)\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfetchData: function () {\n\t\t\t\t//not relevant, ignore\n\t\t\t\treturn $.Deferred().resolve().promise()\n\t\t\t},\n\n\t\t\tfetchMeta: function () {\n\t\t\t\t//not relevant, ignore\n\t\t\t\treturn $.Deferred().resolve().promise()\n\t\t\t}\n\t\t})\n\t})\n}\n","import AbstractPointsBuilder from '../abstract_points_builder.js'\n\nvar Builder = AbstractPointsBuilder.extend({\n\tparse: function (point) {\n\t\t//[Longitude,Latitude,Id,Name,physical_type,condition]\n\t\tvar lng = point[0]\n\t\tvar lat = point[1]\n\t\tvar id = point[2]\n\t\tvar name = point[3]\n\t\tvar physicalType = point[4]\n\t\tvar condition = point[5]\n\t\tvar waypointRegex = /TP0*(\\d+)/\n\t\tvar url = null\n\t\tif (waypointRegex.test(id)) {\n\t\t\tvar match = waypointRegex.exec(id)\n\t\t\tvar trigId = match[1]\n\t\t\turl = 'http://trigpointing.uk/trig/' + trigId\n\t\t}\n\t\tvar extraTexts = [\n\t\t\t['Physical Type', physicalType],\n\t\t\t['Condition', condition]\n\t\t]\n\t\tthis.addMarker(id, lat, lng, url, name, extraTexts, physicalType, [physicalType, condition])\n\t},\n\n\tadd: function (lngLat, url, name, extraTexts, physicalType, condition) {\n\t\tthis.addMarker(null, lngLat[1], lngLat[0], url, name, extraTexts, physicalType, [physicalType, condition])\n\t},\n\n\taddWithoutDimensions: function (lngLat, url, name, icon) {\n\t\tthis.addMarker(null, lngLat[1], lngLat[0], url, name, null, icon, [null], icon)\n\t}\n})\n\nexport default Builder\n","import leaflet from 'leaflet'\n\nvar CustomDefaultIcon = leaflet.Icon.Default.extend({\n\tinitialize: function (config, customIconPath, options) {\n\t\tcustomIconPath = config.baseUrl + customIconPath\n\t\tthis._customIconPath = customIconPath\n\t\tif (options.iconUrl != null) {\n\t\t\toptions.iconUrl = config.baseUrl + options.iconUrl\n\t\t\tif (options.iconRetinaUrl == null) {\n\t\t\t\toptions.iconRetinaUrl = options.iconUrl\n\t\t\t}\n\t\t}\n\t\tif (options.iconRetinaUrl != null) {\n\t\t\toptions.iconRetinaUrl = config.baseUrl + options.iconRetinaUrl\n\t\t}\n\t\tleaflet.Icon.Default.prototype.initialize.call(this, options)\n\t},\n\n\t_getIconUrl: function (name) {\n\t\tvar url = leaflet.Icon.prototype._getIconUrl.call(this, name)\n\t\tif (url == this._customIconPath) {\n\t\t\treturn url\n\t\t} else {\n\t\t\treturn leaflet.Icon.Default.prototype._getIconUrl.call(this, name)\n\t\t}\n\t}\n})\n\nexport default CustomDefaultIcon\n"],"sourceRoot":""}