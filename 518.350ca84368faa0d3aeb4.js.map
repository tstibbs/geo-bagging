{"version":3,"file":"518.350ca84368faa0d3aeb4.js","mappings":"kPAKIA,EAAiB,CAAC,OAAQ,aAwB1BC,EAAuB,CAAC,EACxBC,EAAkB,CAAC,EAOR,SAASC,EAAMC,GAC7B,MAAO,CACNC,YAAa,cACbC,MAAO,CACNC,OAAQ,IAAI,IAAkB,EAAY,CACzCC,QAAS,EACTC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,OAGpBV,eAAgBA,EAChBC,qBAAsBA,EACtBU,OAAQ,UACRC,YACC,yNACDC,sBAAuBC,EAAA,EAAUC,mBAEnC,CAvBAd,EAAqBD,EAAe,IAAME,EAzBjB,CACxB,SACA,OACA,gBACA,QACA,eACA,MACA,QACA,WACA,MACA,sBACA,OACA,cACA,iBACA,QACA,gBACA,cACA,WACA,gBACA,SACA,SACA,QAMkBc,SAAQ,SAAUC,GACpCf,EAAgBe,GAAS,wCAA0CA,EAAQ,KAAOA,EAAQ,MAC3F,G,uEChCe,SAASd,EAAMC,GAC7B,OAAO,SAAS,CAAC,GAAG,aAAiBA,GAAS,CAC7Cc,WAAY,kBAEd,C,+CC2BA,Q,QAhCc,QAAsBC,OAAO,CAC1CC,MAAO,SAAUC,GAEhB,IAAIC,EAAMD,EAAM,GACZE,EAAMF,EAAM,GACZG,EAAKH,EAAM,GACXI,EAAOJ,EAAM,GACbK,EAAeL,EAAM,GACrBM,EAAYN,EAAM,GAClBO,EAAgB,YAChBC,EAAM,KACND,EAAcE,KAAKN,KAGtBK,EAAM,+BAFMD,EAAcG,KAAKP,GACZ,IAGpB,IAAIQ,EAAa,CAChB,CAAC,gBAAiBN,GAClB,CAAC,YAAaC,IAEfM,KAAKC,UAAUV,EAAID,EAAKD,EAAKO,EAAKJ,EAAMO,EAAYN,EAAc,CAACA,EAAcC,GAClF,EAEAQ,IAAK,SAAUC,EAAQP,EAAKJ,EAAMO,EAAYN,EAAcC,GAC3DM,KAAKC,UAAU,KAAME,EAAO,GAAIA,EAAO,GAAIP,EAAKJ,EAAMO,EAAYN,EAAc,CAACA,EAAcC,GAChG,EAEAU,qBAAsB,SAAUD,EAAQP,EAAKJ,EAAMa,GAClDL,KAAKC,UAAU,KAAME,EAAO,GAAIA,EAAO,GAAIP,EAAKJ,EAAM,KAAMa,EAAM,CAAC,MAAOA,EAC3E,G,+CCVD,QAnBwB,OAAaC,QAAQpB,OAAO,CACnDqB,WAAY,SAAUC,EAAgBC,GACrCT,KAAKU,gBAAkBF,EACA,MAAnBC,EAAQlC,SAA4C,MAAzBkC,EAAQE,gBACtCF,EAAQE,cAAgBF,EAAQlC,SAEjC,OAAa+B,QAAQM,UAAUL,WAAWM,KAAKb,KAAMS,EACtD,EAEAK,YAAa,SAAUtB,GACtB,IAAII,EAAM,OAAagB,UAAUE,YAAYD,KAAKb,KAAMR,GACxD,OAAII,GAAOI,KAAKU,gBACRd,EAEA,OAAaU,QAAQM,UAAUE,YAAYD,KAAKb,KAAMR,EAE/D,G","sources":["webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/trigs/config_base.js","webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/trigs/config_mini.js","webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/trigs/points_builder.js","webpack://@tstibbs/geo-bagging-ui/./src/js/custom_default_icon.js"],"sourcesContent":["import pointsBuilder from './points_builder.js'\nimport CustomDefaultIcon from '../../custom_default_icon.js'\nimport pillarIcon from '../../../img/pillar.png'\nimport constants from '../../constants.js'\n\nvar dimensionNames = ['Type', 'Condition']\nvar dimensionValueKeys = [\n\t'Pillar',\n\t'Bolt',\n\t'Surface Block',\n\t'Rivet',\n\t'Buried Block',\n\t'Cut',\n\t'Other',\n\t'Berntsen',\n\t'FBM',\n\t'Intersected Station',\n\t'Disc',\n\t'Brass Plate',\n\t'Active station',\n\t'Block',\n\t'Concrete Ring',\n\t'Curry Stool',\n\t'Fenomark',\n\t'Platform Bolt',\n\t'Cannon',\n\t'Spider',\n\t'Pipe'\n]\nvar dimensionValueLabels = {}\nvar typeValueLabels = {}\ndimensionValueLabels[dimensionNames[0]] = typeValueLabels\n\ndimensionValueKeys.forEach(function (value) {\n\ttypeValueLabels[value] = '<a href=\"http://trigpointing.uk/wiki/' + value + '\">' + value + '</a>'\n})\n\nexport default function build(config) {\n\treturn {\n\t\taspectLabel: 'Trig Points',\n\t\ticons: {\n\t\t\tPillar: new CustomDefaultIcon(pillarIcon, {\n\t\t\t\ticonUrl: pillarIcon,\n\t\t\t\ticonAnchor: [10, 40], // point of the icon which will correspond to marker's location\n\t\t\t\tpopupAnchor: [1, -38] // point from which the popup should open relative to the iconAnchor\n\t\t\t})\n\t\t},\n\t\tdimensionNames: dimensionNames,\n\t\tdimensionValueLabels: dimensionValueLabels,\n\t\tparser: pointsBuilder,\n\t\tattribution:\n\t\t\t'&copy; <a href=\"http://trigpointing.uk\">trigpointing.uk</a> and licenced by Ordnance Survey under the <a href=\"http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\">Open Government Licence</a>.',\n\t\tdataLocationUrlPrefix: constants.dataBackendBaseUrl\n\t}\n}\n","import $ from 'jquery'\nimport trigpointingBase from './config_base.js'\n\nexport default function build(config) {\n\treturn $.extend({}, trigpointingBase(config), {\n\t\tdataToLoad: 'data_mini.json'\n\t})\n}\n","import AbstractPointsBuilder from '../abstract_points_builder.js'\n\nvar Builder = AbstractPointsBuilder.extend({\n\tparse: function (point) {\n\t\t//[Longitude,Latitude,Id,Name,physical_type,condition]\n\t\tvar lng = point[0]\n\t\tvar lat = point[1]\n\t\tvar id = point[2]\n\t\tvar name = point[3]\n\t\tvar physicalType = point[4]\n\t\tvar condition = point[5]\n\t\tvar waypointRegex = /TP0*(\\d+)/\n\t\tvar url = null\n\t\tif (waypointRegex.test(id)) {\n\t\t\tvar match = waypointRegex.exec(id)\n\t\t\tvar trigId = match[1]\n\t\t\turl = 'http://trigpointing.uk/trig/' + trigId\n\t\t}\n\t\tvar extraTexts = [\n\t\t\t['Physical Type', physicalType],\n\t\t\t['Condition', condition]\n\t\t]\n\t\tthis.addMarker(id, lat, lng, url, name, extraTexts, physicalType, [physicalType, condition])\n\t},\n\n\tadd: function (lngLat, url, name, extraTexts, physicalType, condition) {\n\t\tthis.addMarker(null, lngLat[1], lngLat[0], url, name, extraTexts, physicalType, [physicalType, condition])\n\t},\n\n\taddWithoutDimensions: function (lngLat, url, name, icon) {\n\t\tthis.addMarker(null, lngLat[1], lngLat[0], url, name, null, icon, [null], icon)\n\t}\n})\n\nexport default Builder\n","import leaflet from 'leaflet'\n\nvar CustomDefaultIcon = leaflet.Icon.Default.extend({\n\tinitialize: function (customIconPath, options) {\n\t\tthis._customIconPath = customIconPath\n\t\tif (options.iconUrl != null && options.iconRetinaUrl == null) {\n\t\t\toptions.iconRetinaUrl = options.iconUrl\n\t\t}\n\t\tleaflet.Icon.Default.prototype.initialize.call(this, options)\n\t},\n\n\t_getIconUrl: function (name) {\n\t\tvar url = leaflet.Icon.prototype._getIconUrl.call(this, name)\n\t\tif (url == this._customIconPath) {\n\t\t\treturn url\n\t\t} else {\n\t\t\treturn leaflet.Icon.Default.prototype._getIconUrl.call(this, name)\n\t\t}\n\t}\n})\n\nexport default CustomDefaultIcon\n"],"names":["dimensionNames","dimensionValueLabels","typeValueLabels","build","config","aspectLabel","icons","Pillar","iconUrl","iconAnchor","popupAnchor","parser","attribution","dataLocationUrlPrefix","constants","dataBackendBaseUrl","forEach","value","dataToLoad","extend","parse","point","lng","lat","id","name","physicalType","condition","waypointRegex","url","test","exec","extraTexts","this","addMarker","add","lngLat","addWithoutDimensions","icon","Default","initialize","customIconPath","options","_customIconPath","iconRetinaUrl","prototype","call","_getIconUrl"],"sourceRoot":""}