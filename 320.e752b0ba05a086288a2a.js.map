{"version":3,"sources":["webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/milestones/config.js","webpack://@tstibbs/geo-bagging-ui/./src/js/bundles/milestones/points_builder.js","webpack://@tstibbs/geo-bagging-ui/./src/js/custom_default_icon.js"],"names":["dimensionNames","dimensionValueLabels","AA_Signs","Boundary_Markers","Canal_Milemarkers","milestonesIcon","build","config","aspectLabel","defaultIcon","iconUrl","dataToLoad","parser","attribution","parse","point","lng","lat","id","type","category","location","position","design","url","nullIfEmpty","value","trim","lenght","extraInfos","this","addMarker","initialize","customIconPath","options","_customIconPath","iconRetinaUrl","_getIconUrl","name"],"mappings":"yQAIIA,EAAiB,CAAC,YAClBC,EAAuB,GAC3BA,EAAqBD,EAAe,IAAM,CACzCE,SAAU,WACVC,iBAAkB,mBAClBC,kBAAmB,qBAGpB,IAAIC,EAAiB,EAEN,SAASC,EAAMC,GAC7B,MAAO,CACNC,YAAa,WACbC,YAAa,IAAI,IAAkBJ,EAAgB,CAClDK,QAASL,IAEVL,eAAgBA,EAChBC,qBAAsBA,EACtBU,WAAY,YACZC,OAAQ,UACRC,YAAa,iF,yDCWf,Q,QAjCc,eAA6B,CAC1CC,MAAO,SAAUC,GAEhB,IAAIC,EAAMD,EAAM,GACZE,EAAMF,EAAM,GACZG,EAAKH,EAAM,GACXI,EAAOJ,EAAM,GACbK,EAAWL,EAAM,GACjBM,EAAWN,EAAM,GACjBO,EAAWP,EAAM,GACjBQ,EAASR,EAAM,GACfS,EAAMT,EAAM,GACOA,EAAM,GACNA,EAAM,IAE7B,SAASU,EAAYC,GACpB,OAAa,MAATA,GAAyC,IAAxBA,EAAMC,OAAOC,QAAgC,KAAhBF,EAAMC,OAChD,KAEAD,EAIT,IAAIG,EAAa,CAChB,CAAC,QAASJ,EAAYL,IACtB,CAAC,SAAUK,EAAYF,IACvB,CAAC,WAAYE,EAAYJ,IACzB,CAAC,WAAYI,EAAYH,KAE1BQ,KAAKC,UAAUb,EAAID,EAAKD,EAAKQ,EAAKN,EAAIW,EAAY,KAAM,CAACV,Q,2DCV3D,QAnBwB,sBAA4B,CACnDa,WAAY,SAAUC,EAAgBC,GACrCJ,KAAKK,gBAAkBF,EACA,MAAnBC,EAAQxB,SAA4C,MAAzBwB,EAAQE,gBACtCF,EAAQE,cAAgBF,EAAQxB,SAEjC,yCAA+CoB,KAAMI,IAGtDG,YAAa,SAAUC,GACtB,IAAId,EAAM,kCAAwCM,KAAMQ,GACxD,OAAId,GAAOM,KAAKK,gBACRX,EAEA,0CAAgDM,KAAMQ","file":"320.e752b0ba05a086288a2a.js","sourcesContent":["import PointsBuilder from './points_builder.js'\nimport CustomDefaultIcon from '../../custom_default_icon.js'\nimport milestoneIcon from '../../../img/milestone.png'\n\nvar dimensionNames = ['Waymarks']\nvar dimensionValueLabels = {}\ndimensionValueLabels[dimensionNames[0]] = {\n\tAA_Signs: 'AA Signs',\n\tBoundary_Markers: 'Boundary Markers',\n\tCanal_Milemarkers: 'Canal Milemarkers'\n}\n\nvar milestonesIcon = milestoneIcon\n\nexport default function build(config) {\n\treturn {\n\t\taspectLabel: 'Waymarks',\n\t\tdefaultIcon: new CustomDefaultIcon(milestonesIcon, {\n\t\t\ticonUrl: milestonesIcon\n\t\t}),\n\t\tdimensionNames: dimensionNames,\n\t\tdimensionValueLabels: dimensionValueLabels,\n\t\tdataToLoad: 'data.json',\n\t\tparser: PointsBuilder,\n\t\tattribution: '&copy; <a href=\"http://www.msocrepository.co.uk/\">The Milestone Society</a>'\n\t}\n}\n","import AbstractPointsBuilder from '../abstract_points_builder.js'\n\nvar Builder = AbstractPointsBuilder.extend({\n\tparse: function (point) {\n\t\t//[Longitude,Latitude,Id,Type,Category]\n\t\tvar lng = point[0]\n\t\tvar lat = point[1]\n\t\tvar id = point[2]\n\t\tvar type = point[3]\n\t\tvar category = point[4]\n\t\tvar location = point[5]\n\t\tvar position = point[6]\n\t\tvar design = point[7]\n\t\tvar url = point[8]\n\t\tvar additionalPhoto1 = point[9]\n\t\tvar additionalPhoto2 = point[10]\n\n\t\tfunction nullIfEmpty(value) {\n\t\t\tif (value == null || value.trim().lenght === 0 || value.trim() == ',') {\n\t\t\t\treturn null\n\t\t\t} else {\n\t\t\t\treturn value\n\t\t\t}\n\t\t}\n\n\t\tvar extraInfos = [\n\t\t\t['Notes', nullIfEmpty(category)],\n\t\t\t['Design', nullIfEmpty(design)],\n\t\t\t['Location', nullIfEmpty(location)],\n\t\t\t['Position', nullIfEmpty(position)]\n\t\t]\n\t\tthis.addMarker(id, lat, lng, url, id, extraInfos, null, [type])\n\t}\n})\n\nexport default Builder\n","import leaflet from 'leaflet'\n\nvar CustomDefaultIcon = leaflet.Icon.Default.extend({\n\tinitialize: function (customIconPath, options) {\n\t\tthis._customIconPath = customIconPath\n\t\tif (options.iconUrl != null && options.iconRetinaUrl == null) {\n\t\t\toptions.iconRetinaUrl = options.iconUrl\n\t\t}\n\t\tleaflet.Icon.Default.prototype.initialize.call(this, options)\n\t},\n\n\t_getIconUrl: function (name) {\n\t\tvar url = leaflet.Icon.prototype._getIconUrl.call(this, name)\n\t\tif (url == this._customIconPath) {\n\t\t\treturn url\n\t\t} else {\n\t\t\treturn leaflet.Icon.Default.prototype._getIconUrl.call(this, name)\n\t\t}\n\t}\n})\n\nexport default CustomDefaultIcon\n"],"sourceRoot":""}